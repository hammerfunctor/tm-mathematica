* A Mathematica plugin for TeXmacs

  #+CAPTION: Use TeXmacs as the frontend of everything!
  [[./demo.png]]

**  UPDATE

*** 2021/11/25

One night I wanted to neither read books nor sleep, then I rewrote this project.
Now =%= like that in notebook frontend is supported, and, the logic of format and inter-communication
is clarified.

** Installation and Use

   To use this plugin, you need compile it manually. Check following steps:

   1. Confirm your Mathematica or Wolfram Engine support WSTP interface 4 (if you can find in =WSTP_PATH= a file named
      =libWSTP64i4.so=, which is described below), unicode support is incorporated since interface 4. If your Mathematica
      doesn't support interface 4 and you do want to use it. Modify all =*UTF8String*= to be =*ByteString*= may
      make it work.
   2. Confirm =math= is in =PATH=, which is one of executable binaries distributed with Mathematica kernel.
   3. put this repo under =${TEXMACS_HOME_PATH}/plugins= and name it =mma=, which is usually =~/.TeXmacs/plugins/mma=
      (this is essential, since the package is named =mma=)
   4. Find your directory of Mathematica compilation additions for WSTP and make it =WSTP_PATH= variable in =Makefile=.
      On my desktop, its value is =/usr/local/Wolfram/Mathematica/12.3/SystemFiles/Links/WSTP/DeveloperKit/Linux-x86-64/CompilerAdditions=.
      See =Makefile= for details.
   5. In root directory of this repo, do =make=.
   #+begin_src
     # pepper in ~/.TeXmacs/plugins/mma on git:main o [19:34:43]
     $ make
     g++ -m64 -o bin/tm_mma.bin src/tm_mathematica_wstp.cxx
     -I/usr/local/Wolfram/Mathematica/12.3/SystemFiles/Links/WSTP/DeveloperKit/Linux-x86-64/CompilerAdditions
     -L/usr/local/Wolfram/Mathematica/12.3/SystemFiles/Links/WSTP/DeveloperKit/Linux-x86-64/CompilerAdditions
     -Wl,-rpath,/usr/local/Wolfram/Mathematica/12.3/SystemFiles/Links/WSTP/DeveloperKit/Linux-x86-64/CompilerAdditions
     -lWSTP64i4 -lm -lrt -ldl -luuid  -Wl,--gc-sections -lpthread
   #+end_src
   If no error is reported, then next time when you start TeXmacs, this plugin will be available.


   PS: This plugin is tested under *ArchLinux*, under other Linux distros it most likely works as well. Mac user may
   need to do a little hacking in =Makefile=. For I'm not familiar with Windows, Windows users need to do some
   work by hand. Pull requests are welcome.

   PS2: I'm actually not familiar with C++, so if I wrote some shit code, don't pour scorn on me :).

** How it is implemented?

   TeXmacs has had a Mathematica plugin, which is written in 2005. I sadly found it cannot handle graphics output
   and error messgae correctly for now, then I dicided to write one myself.

   Transformation of data is mostly done in Mathematica end, and I just wrote a =Switch= to format the data to string.
   Then do recognize the returned string as: latex segment string, EPS string (=ExportString[g,"EPS"]=),
   plain string, error message string or symbol string. Graphics are displayed via postscript
   (return =\2ps:<postscript string>\5= to standard output), for now only
   Mathematica object with head =Graphics= or =Graphics3D= are regarded as graphics and correctly converted.
   If you find other types worth handling, hack it!

   From the newest Mathematica docs (basically =tutorial/RunningTheWolframSystemFromWithinAnExternalProgram= in reference),
   the types of Wolfram Language packets returned by =WSNextpacket= consist of:

   #+CAPTION: packets returned by Wolfram kernel
   | Wolfram Language Packet    | constant      | meaning                                             |
   |----------------------------+---------------+-----------------------------------------------------|
   | ReturnPacket[expr]         | RETURNPKT     | result from a computation                           |
   | ReturnTextPacket["string"] | RETURNTEXTPKT | textual form of a result                            |
   | InputNamePacket["name"]    | INPUTNAMEPKT  | name of a input line                                |
   | OutputNamePacket["name"]   | OUTPUTNAMEPKT | name of a output line                               |
   | TextPacket["string"]       | TEXTPKT       | textual output form from functions like =Print=       |
   | MessagePacket[symb,"tag"]  | MESSAGEPKT    | name of a message generated by the Wolfram Language |
   |----------------------------+---------------+-----------------------------------------------------|
   | InputPacket["prompt"]      | INPUTPKT      | request for a response to an =Input= function         |
   | CallPacket[i,list]         | CALLPKT       | request for a call to an external function          |

   =NOTE: goal in this part is somehow outmoded, while the fact is true.=

   As a lite frontend, we only need to handle =RETURNPKT=, =TEXTPKT= and =MESSAGEPKT= for below reasons:

   + =INPUTNAMEPKT= and =OUTPUTNAMEPKT= are trivial.
   + =RETURNTEXTPKT= is for the return of =EnterTextPacket=, as explained in =JLink/tutorial/WritingJavaProgramsThatUseTheWolframLanguage=, which is not the way we are to implement the session.
   + Users will not try to call external programs in an tm document, thus =CALLPKT= will not be returned.
   + =INPUTPKT= is also redundent for a session in tm documents.


   I have to struggle to find a graduate school, so issues and pull requests may not be replied in time.

** Have fun!
